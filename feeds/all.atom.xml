<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>kele.github.io</title><link href="http://kele.github.io/" rel="alternate"></link><link href="http://kele.github.io/feeds/all.atom.xml" rel="self"></link><id>http://kele.github.io/</id><updated>2017-06-04T00:00:00+02:00</updated><entry><title>Serwer proxy w Ruscie (część 3)</title><link href="http://kele.github.io/serwer-proxy-w-ruscie-czesc-3.html" rel="alternate"></link><published>2017-06-04T00:00:00+02:00</published><updated>2017-06-04T00:00:00+02:00</updated><author><name>kele</name></author><id>tag:kele.github.io,2017-06-04:/serwer-proxy-w-ruscie-czesc-3.html</id><summary type="html">&lt;p&gt;Model własności (ownership and borrowing), struktury, metody - szkielet echo serwera HTTP.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Obsługa protokołu HTTP&lt;/h2&gt;
&lt;p&gt;Rust ma w miarę dojrzałą bibliotekę do obsługi protokołu HTTP - jest nią
&lt;a href="https://github.com/hyperium/hyper"&gt;&lt;strong&gt;hyper&lt;/strong&gt;&lt;/a&gt;. Biblioteka ta jest używana m.in.
przez &lt;a href="https://github.com/servo/servo"&gt;&lt;strong&gt;Servo&lt;/strong&gt;&lt;/a&gt;, czyli prawdopodobnie
najpoważniejszy projekt pisany w Ruscie w tej chwili.&lt;/p&gt;
&lt;p&gt;Jednak w ramach nauki, napiszę swój własny, prosty moduł do obsługi HTTP.&lt;/p&gt;
&lt;h2&gt;Tworzenie nowego modułu&lt;/h2&gt;
&lt;p&gt;W Ruscie kod organizowany jest w paczkach (&lt;strong&gt;crate&lt;/strong&gt;), a wewnątrz nich w
modułach. Paczki możemy porównać do bibliotek w innych językach. Każda paczka ma
swój główny moduł (&lt;strong&gt;root module&lt;/strong&gt;), a jego potomkami mogą być inne moduły.&lt;/p&gt;
&lt;p&gt;Aby użyć modułu, musimy go zadeklarować:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="nn"&gt;http&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="backref-1"&gt;&lt;/a&gt;
Rust&lt;sup&gt;&lt;a href="#rust-i-cargo"&gt;1&lt;/a&gt;&lt;/sup&gt; wtedy będzie się spodziewać pliku &lt;code&gt;http.rs&lt;/code&gt;
lub &lt;code&gt;http/mod.rs&lt;/code&gt;. Tam też musimy zdefiniować nasz kod.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// http/mod.rs&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;HttpStream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Słowo kluczowe &lt;code&gt;struct&lt;/code&gt; pozwala na zdefiniowanie nowej struktury, natomiast
&lt;code&gt;pub&lt;/code&gt; oznacza tutaj, że chcemy, aby była ona widoczna na zewnątrz tego modułu
(odpowiednik &lt;code&gt;public&lt;/code&gt; z C++ czy Javy).&lt;/p&gt;
&lt;h2&gt;Projektowanie API i model własności&lt;/h2&gt;
&lt;p&gt;Skoro już wiemy, gdzie chcemy umieścić kod do obsługi protokołu HTTP, to nadszedł
czas na zaprojektowanie API.&lt;/p&gt;
&lt;p&gt;Chciałbym, żeby głównym obiektem był &lt;code&gt;http::HttpStream&lt;/code&gt;. Będzie on opakowaniem
dla &lt;code&gt;net::TcpStream&lt;/code&gt; z dodatkiem specyficznych dla protokołu HTTP własności.
Będzie on też właścicielem połączenia TCP przez resztę działania programu.
Wydaje się, że to dobry moment na napisanie trochę o modelu własności Rusta.&lt;/p&gt;
&lt;h2&gt;Model własności (&lt;strong&gt;ownership, borrowing&lt;/strong&gt;)&lt;/h2&gt;
&lt;p&gt;Model własności jest prawdopodobnie najważniejszą cechą Rusta, wyróżniającą go
na tle współczesnych języków programowania.&lt;/p&gt;
&lt;p&gt;W Ruscie, obiekt do funkcji możemy przekazać na trzy sposoby:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;code&gt;foo(x)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;W przypadku &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; przekazywany jest przez &lt;strong&gt;wartość&lt;/strong&gt;. W Ruscie oznacza to
jednak jedną z dwóch możliwości:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; zostanie skopiowany (jeśli implementuje cechę &lt;code&gt;Copy&lt;/code&gt;, o tym później), lub&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; zostanie &lt;strong&gt;oddany na własność&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;W tym drugim przypadku, &lt;code&gt;x&lt;/code&gt; nie będzie mógł być użyty po oddaniu go innej
funkcji! Przykładowo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;X&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="nc"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;próba kompilacji powyższego kodu skończy się błędem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;error[E0382]: use of moved value: `x`
 --&amp;gt; &amp;lt;anon&amp;gt;:7:9
  |
  |     foo(x);
  |         - value moved here
  |     foo(x);
  |         ^ value used here after move
  |
  = note: move occurs because `x` has type `X`, which does not implement the `Copy` trait

error: aborting due to previous error
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;x&lt;/code&gt; zostaje tutaj &lt;strong&gt;oddany na własność&lt;/strong&gt; funkcji &lt;code&gt;foo()&lt;/code&gt;, co oznacza, że
tracimy do niego dostęp. Dzięki takiej semantyce, kompilator może zrobić dwie rzeczy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zabronić używania &lt;code&gt;x&lt;/code&gt; po tym jak został oddany (jak oddasz komuś książkę, to
przecież nie możesz jej nadal czytać),&lt;/li&gt;
&lt;li&gt;poprawnie zdecydować, że to nie ta funkcja odpowiada za zwolnienie pamięci
(tylko &lt;code&gt;foo&lt;/code&gt;, a być może inna funkcja, której &lt;code&gt;foo&lt;/code&gt; przekazuje &lt;code&gt;x&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;W taki własnie sposób, Rust zapewnia bezpieczeństwo przy jednoczesnym braku
kosztu w trakcie wykonania programu (nie musimy zliczać referencji do &lt;code&gt;x&lt;/code&gt;, ani
zaprzęgać do pracy garbage collectora).&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;bar(&amp;amp;x)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;x&lt;/code&gt; w Ruscie oznacza, że zmienną &lt;strong&gt;pożyczamy&lt;/strong&gt; (&lt;strong&gt;borrowing&lt;/strong&gt;). Po skończonej
pracy, &lt;code&gt;bar()&lt;/code&gt; musi oddać ją nam w nienaruszonym stanie. Tzn. przekazujemy &lt;code&gt;x&lt;/code&gt;
tylko &lt;strong&gt;do odczytu&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Wtedy, bezpiecznie można wykonać kod taki jak:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;bo po każdym wywołaniu &lt;code&gt;bar(&amp;amp;x)&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; trafia z powrotem w nasze ręce.
Kompilator wie wtedy, że:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; nie musi się martwić o zwalnianie pamięci dla &lt;code&gt;x&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; nie może trzymać &lt;code&gt;x&lt;/code&gt; w nieskończoność (więcej o tym, jak długo &lt;code&gt;bar&lt;/code&gt;
może korzystać z &lt;code&gt;x&lt;/code&gt; opowiem przy okazji omawiania &lt;strong&gt;lifetimes&lt;/strong&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;code&gt;xyz(&amp;amp;mut x)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Podobnie jak &lt;code&gt;&amp;amp;x&lt;/code&gt;, lecz tym razem pozwalamy zmieniać pożyczony obiekt. Dopiero
przy omawianiu &lt;strong&gt;lifetimes&lt;/strong&gt; będzie można powiedzieć coś więcej o tym jak
różnie &lt;code&gt;&amp;amp;&lt;/code&gt; oraz &lt;code&gt;&amp;amp;mut&lt;/code&gt; są traktowane przez kompilator. Proszę o cierpliwość ;).&lt;/p&gt;
&lt;h2&gt;Projektowanie API (ciąg dalszy)&lt;/h2&gt;
&lt;p&gt;Skoro wiemy już co nieco o tym jak przekazuje się zmienne w Ruscie, możemy
przejść do wymyślania, jak chcemy korzystać z naszego nowo utworzonego
&lt;code&gt;http::HttpStream&lt;/code&gt;. Na początek, napiszemy sobie zwykły &lt;strong&gt;echo server&lt;/strong&gt;, tzn.
będziemy odsyłać zapytania, które otrzymaliśmy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// main.rs&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="nn"&gt;http&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;handle_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;: &lt;span class="nc"&gt;net&lt;/span&gt;::&lt;span class="n"&gt;TcpStream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;::&lt;span class="n"&gt;HttpStream&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// ... główna pętla znajdzie się tutaj ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Z pewnością potrzebujemy &lt;strong&gt;oddać&lt;/strong&gt; połączenie TCP nowemu obiektowi &lt;code&gt;HttpStream&lt;/code&gt;
(nie chcemy, aby ktokolwiek inny mógł pisać do tego samego gniazda) i posłuży
nam do tego funkcja &lt;code&gt;new&lt;/code&gt;. W tej chwili, &lt;code&gt;HttpStream&lt;/code&gt; będzie wyglądać tak:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// http/mod.rs&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;HttpStream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;: &lt;span class="nc"&gt;net&lt;/span&gt;::&lt;span class="n"&gt;TcpStream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HttpStream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;: &lt;span class="nc"&gt;net&lt;/span&gt;::&lt;span class="n"&gt;TcpStream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;HttpStream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;HttpStream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;: &lt;span class="nc"&gt;tcp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;impl&lt;/code&gt; służy do implementowania metod dla danej struktury. Jak widać, zamiast
dodawać słowo kluczowe &lt;code&gt;pub&lt;/code&gt; przed &lt;code&gt;impl&lt;/code&gt;, robi się to na poziomie pojedynczych
metod. W tym przypadku, &lt;code&gt;new&lt;/code&gt; jest &lt;strong&gt;associated function&lt;/strong&gt; (w innych językach
nazwalibyśmy ją metodą statyczną (static method)), co oznacza, że nie potrzebuje
przyjmować obiektu tego typu jako swojego argumentu (ale dalej ma dostęp do
prywatnych pól). Stąd też wywołuje się ją jako &lt;code&gt;HttpStream::new()&lt;/code&gt; zamiast
&lt;code&gt;h.new()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Jedynym zadaniem &lt;code&gt;new&lt;/code&gt; jest przekazanie &lt;code&gt;tcp&lt;/code&gt; do &lt;code&gt;HttpStream&lt;/code&gt;. Robimy to, bo nie
chcemy, aby &lt;code&gt;tcp&lt;/code&gt; było publicznym polem &lt;code&gt;HttpStream&lt;/code&gt; (przynajmniej na razie).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// main.rs&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="nn"&gt;http&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;handle_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;: &lt;span class="nc"&gt;net&lt;/span&gt;::&lt;span class="n"&gt;TcpStream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;::&lt;span class="n"&gt;HttpStream&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_closed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error while getting http request: {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pojawiły się dwie nowe metody: &lt;code&gt;is_closed()&lt;/code&gt; oraz &lt;code&gt;get()&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// http/mod.rs&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HttpStream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;io&lt;/span&gt;::&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpPacket&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// TODO&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpPacket&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;is_closed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// TODO&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;get&lt;/code&gt; będzie służyć do odbierania pakietów HTTP (&lt;code&gt;HttpPacket&lt;/code&gt;), w związku z tym:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;musi mieć możliwość zmiany pola &lt;code&gt;tcp&lt;/code&gt;, stąd &lt;code&gt;get&lt;/code&gt; przyjmuje mutowalną
  referencję (&lt;code&gt;&amp;amp;mut&lt;/code&gt;) do obiektu typu &lt;code&gt;HttpStream&lt;/code&gt; (&lt;code&gt;self&lt;/code&gt;, podobnie jak w
  Pythonie),&lt;/li&gt;
&lt;li&gt;zwraca &lt;code&gt;io::Result&amp;lt;HttpPacket&amp;gt;&lt;/code&gt;, bo tak &lt;a href="serwer-proxy-w-ruscie-czesc-2.html"&gt;jak już
  wspominałem&lt;/a&gt;, coś może podczas
  odczytywania pójść nie tak i chciałbym mieć możliwość obsługi błędu,&lt;/li&gt;
&lt;li&gt;na razie implementacja ogranicza się do zwrócenia &lt;code&gt;Ok(HttpPacket {})&lt;/code&gt;, czyli
  pustego pakietu (gdybym chciał zwrócić błąd, użyłbym &lt;code&gt;Err&lt;/code&gt; zamiast &lt;code&gt;Ok&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;is_closed&lt;/code&gt; natomiast, po prostu odpowiada na pytanie, czy połączenie zostało
zamknięte.&lt;/p&gt;
&lt;p&gt;Jak widać, potrzebna jest nam nowa struktura, &lt;code&gt;HttpPacket&lt;/code&gt;, która będzie
reprezentować pojedynczy pakiet HTTP.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// http/mod.rs&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;HttpPacket&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pozostało teraz dopisać linijkę, odpowiadającą za odsyłanie odpowiedzi.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// main.rs&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;handle_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;: &lt;span class="nc"&gt;net&lt;/span&gt;::&lt;span class="n"&gt;TcpStream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;::&lt;span class="n"&gt;HttpStream&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_closed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error while getting http request: {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;::&lt;span class="n"&gt;HttpPacket&lt;/span&gt;&lt;span class="p"&gt;{});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oraz odpowiednią (pustą, na razie) implementację &lt;code&gt;send&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// http/mod.rs&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HttpStream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;HttpPacket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;::&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;send&lt;/code&gt; może zwrócić błąd, ale poza tym, nie zwraca niczego interesującego. W
takim wypadku, przydaje się typ &lt;code&gt;()&lt;/code&gt; (unit), podobny do &lt;code&gt;void&lt;/code&gt; znanego z innych
języków.&lt;/p&gt;
&lt;h2&gt;Podsumowanie&lt;/h2&gt;
&lt;p&gt;Jak widać, nie udało się napisać nam jeszcze niczego co jakkolwiek sensownie
działa, ale przebrnęliśmy przez kilka kluczowych cech Rusta, bez których
jakiekolwiek zrozumienie dowolnego kodu byłoby niemożliwe.&lt;/p&gt;
&lt;p&gt;Mam nadzieję, ze w kolejnym poście uda mi się zaimplementować prosty serwer
echo.&lt;/p&gt;
&lt;hr&gt;

&lt;h3&gt;Przypisy&lt;/h3&gt;
&lt;p&gt;&lt;a name="rust-i-cargo"&gt;&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; W oficjalnej dokumentacji przez "Rust" rozumie się
zarówno sam język jak i &lt;code&gt;cargo&lt;/code&gt;. (&lt;a href="#backref-1"&gt;wróć do tekstu&lt;/a&gt;)&lt;/p&gt;</content><category term="rust"></category><category term="foxy"></category></entry><entry><title>Serwer proxy w Ruscie (część 2)</title><link href="http://kele.github.io/serwer-proxy-w-ruscie-czesc-2.html" rel="alternate"></link><published>2017-06-03T00:00:00+02:00</published><updated>2017-06-03T00:00:00+02:00</updated><author><name>kele</name></author><id>tag:kele.github.io,2017-06-03:/serwer-proxy-w-ruscie-czesc-2.html</id><summary type="html">&lt;p&gt;Początkowy szkielet programu.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Posłuchajmy czegoś po TCP&lt;/h2&gt;
&lt;p&gt;Tak wygląda szkielet naszego programu (wyjaśnienia poniżej):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// main.rs&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROXY_PORT&lt;/span&gt;: &lt;span class="kt"&gt;u16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;::&lt;span class="n"&gt;TcpListener&lt;/span&gt;::&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROXY_PORT&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;handle_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;panic&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error while accepting connection: {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;handle_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;: &lt;span class="nc"&gt;net&lt;/span&gt;::&lt;span class="n"&gt;TcpStream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Opened connection: {:?}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Nasłuchiwanie&lt;/h3&gt;
&lt;p&gt;Używać będziemy paczki (&lt;strong&gt;crate&lt;/strong&gt;)
&lt;a href="https://doc.rust-lang.org/std/net/"&gt;&lt;code&gt;std::net&lt;/code&gt;&lt;/a&gt;. Robimy to za pomocą:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Użyjemy funkcji
&lt;a href="https://doc.rust-lang.org/std/net/struct.TcpListener.html"&gt;&lt;code&gt;std::net::TcpListener::bind&lt;/code&gt;&lt;/a&gt;,
żeby zacząć nasłuchiwać na porcie 4000 lokalnej maszyny:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROXY_PORT&lt;/span&gt;: &lt;span class="kt"&gt;u16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;::&lt;span class="n"&gt;TcpListener&lt;/span&gt;::&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROXY_PORT&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;u16&lt;/code&gt; to odpowiednik &lt;code&gt;uint16&lt;/code&gt;, zatem &lt;code&gt;const PROXY_PORT: u16 = 4000;&lt;/code&gt; jest po
prostu deklaracją stałej &lt;code&gt;PROXY_PORT&lt;/code&gt; typu liczba naturalnia 16-bitowa o
wartości 4000.&lt;/p&gt;
&lt;p&gt;Czym jest tajemnicze &lt;code&gt;unwrap()&lt;/code&gt; na końcu? Rust jest językiem nastawionym przede
wszystkim na bezpieczeństwo, wymuszane już w czasie kompilacji. Na czym to
dokładnie polega w tym przypadku? &lt;code&gt;bind()&lt;/code&gt; mógłby zwyczajnie zwrócić
&lt;code&gt;TcpListener&lt;/code&gt;, jednak zamiast tego zwraca
&lt;a href="https://doc.rust-lang.org/std/io/type.Result.html"&gt;&lt;code&gt;std::io::Result&amp;lt;TcpListener&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Co to za różnica?&lt;/p&gt;
&lt;p&gt;Coś po drodze może pójść nie tak (np. port może być już zajęty). Można radzić sobie z tym na różne sposoby:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rzucając wyjątek (Java, C++?),&lt;/li&gt;
&lt;li&gt;zwracając wskaźnik (C, C++),&lt;/li&gt;
&lt;li&gt;zwracając dwie wartości &lt;code&gt;(TcpListener, bool)&lt;/code&gt; (Go),&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.cppreference.com/w/cpp/utility/optional"&gt;&lt;code&gt;std::optional&lt;/code&gt;&lt;/a&gt; (C++17).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rzucenie wyjątku nie wymusza na programiście obsłużenia go. Zwracanie wskaźnika
czy wartości typu &lt;code&gt;bool&lt;/code&gt; również. &lt;code&gt;std::optional&lt;/code&gt; wystarczy ominąć prostym &lt;code&gt;*&lt;/code&gt;.
Rust idzie jednak inną drogą. Zamiast powyższych rozwiązań, zwracane jest
opakowanie (&lt;code&gt;Result&lt;/code&gt;), które może zawierać oczekiwaną przez nas
wartość &lt;code&gt;TcpListener&lt;/code&gt; lub błąd (&lt;code&gt;Error&lt;/code&gt;)!&lt;/p&gt;
&lt;p&gt;W związku z tym, że rozpoczęcie
nasłuchiwania na jakimś porcie jest kluczowe dla działania programu, jedyne co
robię, to rozpakowuję wynik (&lt;code&gt;unwrap()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Cóż robi ta tajemnicza metoda? Jeśli nie było błędu - zwraca wartość. Jeśli
pojawił się błąd, wykonuje się
&lt;a href="https://doc.rust-lang.org/std/macro.panic.html"&gt;&lt;code&gt;panic!&lt;/code&gt;&lt;/a&gt; (odpowiednik
&lt;a href="https://blog.golang.org/defer-panic-and-recover"&gt;&lt;code&gt;panic&lt;/code&gt;&lt;/a&gt; z Go).&lt;/p&gt;
&lt;h3&gt;Akceptowanie połączenia&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;handle_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;panic&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error while accepting connection: {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Jeśli udało się poprawnie zaakceptować połączenie, wywołajmy
&lt;code&gt;handle_connection(sock)&lt;/code&gt;, które zajmie się dalszą obsługą połączenia.&lt;/p&gt;
&lt;p&gt;Jeśli nie - &lt;code&gt;panic!&lt;/code&gt; z odpowiednim komunikatem o błędzie.&lt;/p&gt;
&lt;h3&gt;Pattern matching (&lt;code&gt;match&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;match&lt;/code&gt; jest konstrukcją, która jest spotykana raczej w językach funkcyjnych
(OCaml, Haskell, Lisp) niż w imperatywnych (C, Python, Java, C++), dlatego
chciałbym poświęcić jej parę zdań.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Pattern_matching"&gt;&lt;strong&gt;Pattern matching&lt;/strong&gt;&lt;/a&gt;, bo tak
nazywa się ta konstrukcja, służy do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sprawdzania, czy obiekt jest taki jak nam się wydaje (w powyższym przypadku,
  czy to jest &lt;code&gt;Ok&lt;/code&gt; (prawidłowa wartość) czy &lt;code&gt;Err&lt;/code&gt; (błąd)),&lt;/li&gt;
&lt;li&gt;rozłożenia go na mniejsze porcje (&lt;code&gt;Ok&lt;/code&gt; w powyższym przykładzie składa się z
  dwóch cześci, pierwszą jest socket, drugą adres, adres ignoruję (poprzez &lt;code&gt;_&lt;/code&gt;),
  ale socket zapamiętuję jako &lt;code&gt;sock&lt;/code&gt;),&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Przykładowo, gdbyśmy pisali kalkulator oparty na drzewach wyrażen
arytmetycznych, pewna częśc kodu mogłaby wyglądać tak:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Taka konstrukcja w językach programowania jest możliwa dzięki istnieniu
specjalnych typów, które są alternatywą różnych wartości. Tzn. wyrażenie
arytmetyczne może być dodawaniem, odejmowaniem, mnożeniem lub dzieleniem.
Informacja o tym, czym właściwie jest dane wyrażenie, jest zapisywana i
sprawdzana w czasie wykonania programu. To co jest ważne, to fakt, że kompilator
wie, jakie są wszystkie możliwe alternatywy (i może nas ostrzec, gdy o którejś
zapomnimy!). W C++ możnaby to symulować w taki sposób:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mul&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Div&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Sub&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Mul&lt;/span&gt; &lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Div&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;Mul&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;Div&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Jak widać, pattern matching jest dość wygodny. W językach, które go wspierają,
implementacja jest na ogół wydajniejsza niż to co pokazałem powyżej w C++.
Niestety, za mało jeszcze wiem o Ruscie, żeby wiedzieć jak wyglądają jego
wewnętrzne mechanizmy w tym wypadku.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;panic!&lt;/code&gt; oraz &lt;code&gt;{}&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;panic!&lt;/code&gt; jest makrem (na razie możemy traktować to jako funkcję, lecz &lt;code&gt;!&lt;/code&gt; jest w
Ruscie sygnałem, że w istocie jest to makro), które używane jest w przypadku
krytycznych dla działania programu błędów.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;panic!&lt;/code&gt; przyjmuje argumenty podobne do &lt;code&gt;printf&lt;/code&gt; znanego z wielu innych języków,
tyle tylko, że &lt;code&gt;{}&lt;/code&gt; pozwala na wyświetlenie wartości dowolnego (no, nie do
końca, ale o tym kiedy indziej) typu.&lt;/p&gt;
&lt;h2&gt;Co dalej?&lt;/h2&gt;
&lt;p&gt;W kolejnych postach planuję omówić:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;obsługę zapytań w różnych wątkach,&lt;/li&gt;
&lt;li&gt;semantykę własności i pożyczania (ownership and borrowing) (jest to główna
  cecha wyróżniająca Rust na tle innych popularnych języków programowania),&lt;/li&gt;
&lt;li&gt;tworzenie włąsnych struktur,&lt;/li&gt;
&lt;li&gt;metody,&lt;/li&gt;
&lt;li&gt;implementacje cech (trait),&lt;/li&gt;
&lt;li&gt;wyrażenia i rozkazy (expressions and statements),&lt;/li&gt;
&lt;li&gt;i wiele innych.&lt;/li&gt;
&lt;/ul&gt;</content><category term="rust"></category><category term="foxy"></category></entry><entry><title>Serwer proxy w Ruscie (część 1)</title><link href="http://kele.github.io/serwer-proxy-w-ruscie-czesc-1.html" rel="alternate"></link><published>2017-06-02T00:00:00+02:00</published><updated>2017-06-02T00:00:00+02:00</updated><author><name>kele</name></author><id>tag:kele.github.io,2017-06-02:/serwer-proxy-w-ruscie-czesc-1.html</id><summary type="html">&lt;p&gt;Nauka Rusta na podstawie prostego serwera proxy.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;O czym będzie ten projekt?&lt;/h1&gt;
&lt;h2&gt;Motywacja&lt;/h2&gt;
&lt;p&gt;Jestem człowiekiem, który stale się czymś rozprasza. Często odwiedzam strony dla
programistów czy ludzi związanych ze startupami (m.in. Hacker News, lobste.rs),
nawet jeśli nie bardzo mam czas poczytać artykuły, które tam są linkowane. Jak
się można domyślać, niezbyt pomaga to w produktywnej pracy. Nie mam żadnego
problemu, kiedy jestem mocno zajęty, ale jeśli mam 2-3 minuty, bo coś mi się
kompiluje/mój map-reduce się jeszcze nie skończył/czekam na odpowiedź od
kogoś/cokolwiek, to moim naturalnym odruchem jest przejrzenie wszystkich,
chociaż trochę interesujących mnie stron.&lt;/p&gt;
&lt;p&gt;Próbowałem różnych rozszerzeń do Chrome, zmian w &lt;code&gt;/etc/hosts&lt;/code&gt; czy blokowania
niektórych domen w domowym routerze, ale żadna z tych opcji mnie w pełni nie
zadowoliła (żadne z powyższych nie było wystarczająco elastyczne). Stąd pomysł
napisania własnego serwera proxy, którego zachowanie będę mógł do woli
konfigurować. Przykładowo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;przekierowywać mnie z pewnych stron na inne,&lt;/li&gt;
&lt;li&gt;ograniczać dostęp do stron na pewien czas,&lt;/li&gt;
&lt;li&gt;opóźniać ładowanie stron (często takie opóźnienie pozwala mi na zreflektowanie
  się, że wcale nie chciałem zajrzeć na daną stronę i spędzić na niej połowy
  dnia),&lt;/li&gt;
&lt;li&gt;itd.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Czemu Rust?&lt;/h2&gt;
&lt;p&gt;Moim podstawowym językiem był od zawsze C++, w pracy teraz używam Go, a idea
silnego kompilatora zdecydowanie do mnie przemawia. Dlatego chciałbym nauczyć
się Rusta. Poza tym, serwer proxy wydaje się na tyle prostym projektem, że mogę
w międzyczasie poznawać nowy język, ale na tyle trudnym, żebym mógł coś o nim
powiedzieć.&lt;/p&gt;
&lt;h2&gt;Czego możecie oczekiwać?&lt;/h2&gt;
&lt;p&gt;Chciałbym, żeby to była relacja z mojej przygody z Rustem. Nigdy nie pisałem w
tym języku, więc raczej &lt;strong&gt;nie pokazę jak pisać dobrze&lt;/strong&gt; w Ruscie, ale będę
starał się zgłębiać temat jak najbardziej, żeby nie pisać tutaj bzdur. Wiem
mniej więcej, o co chodzi z borrow checkerem i mam małe doświadczenie z językami
z systemem typów Hindleya-Milnera (OCaml), więc mam nadzieję, że nie będę
kompletnie zagubiony. ;)&lt;/p&gt;
&lt;h2&gt;Czemu blog i czemu po polsku?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Mam nadzieję, że regularne pisanie zmotywuje mnie do regularnej nauki. ;)&lt;/li&gt;
&lt;li&gt;Materiały o Ruscie widzę głównie po angielsku, więc może warto?&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Przygotowania&lt;/h1&gt;
&lt;h2&gt;Kompilator&lt;/h2&gt;
&lt;p&gt;Instalacja jest dziecinnie prosta: &lt;a href="https://rustup.rs/"&gt;rustup.rs&lt;/a&gt;. Część
dystrybucji będzie miała też Rusta w swoich repozytoriach.&lt;/p&gt;
&lt;p&gt;Dla wygody, większość operacji (tworzenie projektów, kompilacja, uruchamianie
itd.) wykonuje się przy pomocy narzędzia o nazwie &lt;code&gt;cargo&lt;/code&gt;. Nie zapomnijcie go
zainstalować, jeśli nie korzystacie z rustup.rs.&lt;/p&gt;
&lt;h2&gt;Dokumentacja i inne materiały do nauki&lt;/h2&gt;
&lt;p&gt;Rust ma solidny zbiór materiałów do nauki wraz z dokumentacją języka i
biblioteki standardowej na swojej oficjalnej stronie
&lt;a href="https://www.rust-lang.org/"&gt;rust-lang.org&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Moje środowisko&lt;/h2&gt;
&lt;p&gt;VIM + &lt;a href="https://github.com/phildawes/racer"&gt;Racer&lt;/a&gt; +
&lt;a href="https://github.com/racer-rust/vim-racer"&gt;vim-racer&lt;/a&gt;. Racer jest narzędziem do
autouzupełniania dla Rusta.&lt;/p&gt;
&lt;h2&gt;Stworzenie nowego projektu&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cargo new --bin projekt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Powyższe polecenie stworzy szablon aplikacji wykonywalnej (&lt;code&gt;--bin&lt;/code&gt;) o nazwie
&lt;code&gt;projekt&lt;/code&gt;. Co ciekawe, szablon ten zostanie stworzony wewnątrz nowego
repozytorium Git (miły gest ;)).&lt;/p&gt;
&lt;p&gt;Projekt budujemy przy pomocy &lt;code&gt;cargo build&lt;/code&gt;. Początkowo, &lt;code&gt;cargo&lt;/code&gt; tworzy nam znane
Hello World.&lt;/p&gt;
&lt;h1&gt;Koniec postu&lt;/h1&gt;
&lt;p&gt;Na dziś to koniec. W kolejnym poście będzie już trochę kodu. ;)&lt;/p&gt;</content><category term="rust"></category><category term="foxy"></category></entry><entry><title>Blog po polsku (blog in Polish)</title><link href="http://kele.github.io/blog-po-polsku-blog-in-polish.html" rel="alternate"></link><published>2017-06-01T00:00:00+02:00</published><updated>2017-06-01T00:00:00+02:00</updated><author><name>kele</name></author><id>tag:kele.github.io,2017-06-01:/blog-po-polsku-blog-in-polish.html</id><summary type="html">&lt;h4&gt;Starting from this post, the blog is going to be in Polish language only.&lt;/h4&gt;
&lt;h4&gt;Od dziś, blog będzie prowadzony wyłącznie po polsku.&lt;/h4&gt;
&lt;h4&gt;Plany na najbliższą przyszłość: http proxy napisane w Ruscie.&lt;/h4&gt;</summary><content type="html">&lt;h4&gt;Starting from this post, the blog is going to be in Polish language only.&lt;/h4&gt;
&lt;h4&gt;Od dziś, blog będzie prowadzony wyłącznie po polsku.&lt;/h4&gt;
&lt;h4&gt;Plany na najbliższą przyszłość: http proxy napisane w Ruscie.&lt;/h4&gt;</content><category term="meta"></category><category term="polski"></category></entry><entry><title>CIFAR10 classification summary</title><link href="http://kele.github.io/cifar10-classification-summary.html" rel="alternate"></link><published>2016-03-04T00:00:00+01:00</published><updated>2016-03-04T00:00:00+01:00</updated><author><name>kele</name></author><id>tag:kele.github.io,2016-03-04:/cifar10-classification-summary.html</id><summary type="html">&lt;h1&gt;Problem description&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html"&gt;CIFAR10&lt;/a&gt; classification is a very popular problem among neural networks enthusiast. The main task is to map 32x32 RGB images to (disjoint) classes. This (simple) version of the problem differentiates 10 classes (hence the name).&lt;/p&gt;
&lt;p&gt;A list of best results for this problem can be found &lt;a href="http://rodrigob.github.io/are_we_there_yet/build/classification_datasets_results.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Problem description&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html"&gt;CIFAR10&lt;/a&gt; classification is a very popular problem among neural networks enthusiast. The main task is to map 32x32 RGB images to (disjoint) classes. This (simple) version of the problem differentiates 10 classes (hence the name).&lt;/p&gt;
&lt;p&gt;A list of best results for this problem can be found &lt;a href="http://rodrigob.github.io/are_we_there_yet/build/classification_datasets_results.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As one can guess, this problem is significantly harder than MNIST, both because of the input size and the nature of the images (two pictures of cats can be very different, but a digit always has roughly the same shape).&lt;/p&gt;
&lt;p&gt;The CIFAR10 dataset consists of 60000 32x32 colour images in 10 classes, with 6000 images per class. There are 50000 training images and 10000 test images. &lt;/p&gt;
&lt;h1&gt;Network architecture&lt;/h1&gt;
&lt;p&gt;Since the dataset is a collection of 2D images, using convolutional neural networks seem to be a good place to start. This is because of the fact that CNNs are able to learn to detect some local properties of the input, by looking at a patch of data at once. This is not only vital for doing any image processing work (i.e. edge detection), but it can greately decrease the size of the NN, since neurons used to detect a single feature share parameters (weights).&lt;/p&gt;
&lt;h1&gt;How the training is done?&lt;/h1&gt;
&lt;h2&gt;Technique&lt;/h2&gt;
&lt;p&gt;Stochastic gradient descent (with mini batches) is used as a standard learning technique.&lt;/p&gt;
&lt;h2&gt;Epochs&lt;/h2&gt;
&lt;p&gt;The training set is divided into epochs of a size of 40000 images, after each a validation set of size 10000 is used. The data is split into mini batches.&lt;/p&gt;
&lt;h2&gt;Mini batches&lt;/h2&gt;
&lt;p&gt;Mini batches of size 100 are used. Using less than that seems to be a bad idea, since we have 10 classes and we would like to see at least a few examples of each class in one mini batch. Using more than that might speed up the computation on GPUs, but because of the choice of the learning technique (SGD), it might actually take longer to learn (fewer steps).&lt;/p&gt;
&lt;h2&gt;Data preparation&lt;/h2&gt;
&lt;p&gt;The data is scaled and shifted to fit in [-1; +1] range.&lt;/p&gt;
&lt;h1&gt;Report&lt;/h1&gt;
&lt;h2&gt;Getting around 75% accuracy&lt;/h2&gt;
&lt;p&gt;This is a sample network architecture that is able to quickly learn to solve our problem achieving around 75% accuracy on the test dataset.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Input layer&lt;/li&gt;
&lt;li&gt;2d Convolutional layer (128 filters of size 5x5, ReLu)&lt;/li&gt;
&lt;li&gt;2d MaxPool layer (pool size 2x2)&lt;/li&gt;
&lt;li&gt;2d Convolutional layer (128 filters of size 5x5, ReLu)&lt;/li&gt;
&lt;li&gt;2d MaxPool layer (pool size 2x2)&lt;/li&gt;
&lt;li&gt;Dropout layer (probability = 0.5)&lt;/li&gt;
&lt;li&gt;Dense layer (256 neurons, ReLu)&lt;/li&gt;
&lt;li&gt;Softmax layer (10 neurons)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This simple architecture deservers a short explanation.&lt;/p&gt;
&lt;p&gt;ReLu is used as the activation function for the obvious reasons (efficient computation, no vanishing gradient, etc.). At the moment of writing this report, it seems to be the most popular activation function for NNs.&lt;/p&gt;
&lt;p&gt;An affine (dense) layer is introduced near the end of the network for simplicity. Although, all-convolutional NNs are possible (&lt;a href="http://arxiv.org/abs/1412.6806"&gt;http://arxiv.org/abs/1412.6806&lt;/a&gt;), their design is a little more sophisticated.&lt;/p&gt;
&lt;p&gt;As for mitigating the risks of overfitting, early stopping with a validation set is used. The second tool helping to deal with this phenomena is the dropout.&lt;/p&gt;
&lt;h2&gt;Getting over 75% accuracy&lt;/h2&gt;
&lt;h3&gt;Techniques used to improve the learning process&lt;/h3&gt;
&lt;p&gt;The architecture mentioned in previous chapter is probably not suitable for getting statistically significant over 75% accuracy without a bit of luck.&lt;/p&gt;
&lt;p&gt;Since the network is not that small, there is a risk of overfitting. Besides dropout, weight decay (L2 regularization) and momentum are used.&lt;/p&gt;
&lt;p&gt;Learning rate decay is used as a standard approach to improve both the speed and the effectiveness of the process.&lt;/p&gt;
&lt;h3&gt;Architecture&lt;/h3&gt;
&lt;p&gt;This architecture together with mentioned improvements can be used to achieve 78% test accuracy within just 25 epochs of training. One epoch took around 15s on GeForce GTX 780 GPU, which sums up to less than 7 minutes of training.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Input layer&lt;/li&gt;
&lt;li&gt;2d Convolutional layer (128 filters of size 5x5, ReLu)&lt;/li&gt;
&lt;li&gt;2d MaxPool layer (pool size 2x2)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2d Convolutional layer (64 filters of size 5x5, ReLu)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;2d MaxPool layer (pool size 2x2)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dropout layer (probability = 0.5)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dense layer (800 neurons, ReLu)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Dropout layer (probability = 0.5)&lt;/li&gt;
&lt;li&gt;Dense layer (256 neurons, ReLu)&lt;/li&gt;
&lt;li&gt;Softmax layer (10 neurons)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It seems that keeping two big convolutional layers was not needed. On the other hand, introducing an additional affine layer helped achieving better accuracy. Adding more dropout layers seems to introduce too much noise to make the learning process efficient.&lt;/p&gt;
&lt;h3&gt;Hyperparameters&lt;/h3&gt;
&lt;p&gt;The hyperparamers were found by trial and error.&lt;/p&gt;
&lt;p&gt;The learning rate decay formula:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start: 0.01&lt;/li&gt;
&lt;li&gt;divide by 1.5 after 4000 mini batches&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Momentum: 0.9.&lt;/p&gt;
&lt;p&gt;Weight decay: 0.01.&lt;/p&gt;
&lt;h2&gt;Getting over 80% accuracy&lt;/h2&gt;
&lt;h3&gt;Data augmentation&lt;/h3&gt;
&lt;p&gt;Introducing random horizontal flip (mirror, left to right) improved the accuracy to over 80% after less than 60 epochs (with the same epoch computation time as before, 15 seconds).&lt;/p&gt;
&lt;h2&gt;Getting 81.72% accuracy&lt;/h2&gt;
&lt;p&gt;Data augmentation
Adding a random rotation between [-20; +20] degrees allowed to achieve 81.72% accuracy on the test dataset without increasing the learning time.&lt;/p&gt;
&lt;h1&gt;Implementation details&lt;/h1&gt;
&lt;p&gt;A lightweight library built on top of &lt;a href="http://deeplearning.net/software/theano/"&gt;Theano&lt;/a&gt; called &lt;a href="https://github.com/Lasagne/Lasagne"&gt;Lasagne&lt;/a&gt; was used for the implementation. The source code is available here: &lt;a href="https://github.com/kele/cifar_recognition/"&gt;https://github.com/kele/cifar_recognition/&lt;/a&gt;. Using it is pretty straightforward and I highly recommend this as a base for any neural networks project.&lt;/p&gt;
&lt;h1&gt;Future work&lt;/h1&gt;
&lt;h2&gt;Deeper neural network&lt;/h2&gt;
&lt;p&gt;A deeper neural network could be used to improve the results. On the other hand, that might introduce even bigger risk of overfitting and greately increase the learning time.&lt;/p&gt;
&lt;h2&gt;Data augmentation&lt;/h2&gt;
&lt;p&gt;Data augmentation proved to be very helpful for solving the CIFAR10 problem. The solutions described in this report could take advantage of image transformations such as ZCA. Also, using slight shifts and rotations, or random crops of the image could be used to artificially enlarge the training dataset.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;One can easily solve the CIFAR10 classification problem with a decent accuracy using widely available Python libraries. The only caveat is the fact that deep neural networks might require efficient, CUDA-capable GPUs to work (and learn) fast.&lt;/p&gt;</content></entry><entry><title>Using Lasagne to achieve over 75% accuracy on CIFAR10.</title><link href="http://kele.github.io/using-lasagne-to-achieve-over-75-accuracy-on-cifar10.html" rel="alternate"></link><published>2016-01-25T00:00:00+01:00</published><updated>2016-01-25T00:00:00+01:00</updated><author><name>kele</name></author><id>tag:kele.github.io,2016-01-25:/using-lasagne-to-achieve-over-75-accuracy-on-cifar10.html</id><summary type="html">&lt;p&gt;This is the first report of my battle with the &lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html"&gt;CIFAR10
classification&lt;/a&gt; problem.&lt;/p&gt;
&lt;p&gt;I've decided to use &lt;a href="http://lasagne.readthedocs.org/en/latest/"&gt;Lasagne&lt;/a&gt; which
is a ligthweight library build on top of
&lt;a href="http://deeplearning.net/software/theano/"&gt;Theano&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's the source code I'll be talking about in this post:
&lt;a href="https://github.com/kele/cifar_recognition/tree/over75"&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;I don't do any data augmentation.&lt;/li&gt;
&lt;li&gt;This piece of …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This is the first report of my battle with the &lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html"&gt;CIFAR10
classification&lt;/a&gt; problem.&lt;/p&gt;
&lt;p&gt;I've decided to use &lt;a href="http://lasagne.readthedocs.org/en/latest/"&gt;Lasagne&lt;/a&gt; which
is a ligthweight library build on top of
&lt;a href="http://deeplearning.net/software/theano/"&gt;Theano&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's the source code I'll be talking about in this post:
&lt;a href="https://github.com/kele/cifar_recognition/tree/over75"&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;I don't do any data augmentation.&lt;/li&gt;
&lt;li&gt;This piece of code was intended to get me familiarized with Lasagne.&lt;/li&gt;
&lt;li&gt;It achieves slighly over 75% accuracy and I think it's the peak for this
  design of the neural network.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;What is in my toolbox?&lt;/h1&gt;
&lt;p&gt;My network consists of both dense and convolutional layers. There's a good
reason to use the latter, since they might exploit the nature of our problem
(which is image classification). More on that can be read
&lt;a href="http://colah.github.io/posts/2014-07-Conv-Nets-Modular/"&gt;here&lt;/a&gt;,
&lt;a href="http://colah.github.io/posts/2014-07-Understanding-Convolutions/"&gt;here&lt;/a&gt; and
&lt;a href="http://neuralnetworksanddeeplearning.com/chap6.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The main intution behind convolutional layers is as follows. We want to detect a
&lt;em&gt;local&lt;/em&gt; property of an image, i.e. an edge. We don't really care (for now) where
it is, we just want to be sure that it exists. There's no difference in
detecting an edge in the middle of an image or a few pixels to the right.
Because of that, it makes no sense to keep separate parameters (weights and
biases) for different neurons, just because they're looking in some other place
for the same thing.&lt;/p&gt;
&lt;p&gt;An additional benefit is the fact that since we're sharing the parameters, there
are less of them to find.&lt;/p&gt;
&lt;h1&gt;Architecture&lt;/h1&gt;
&lt;p&gt;How does the architecture look like?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Input layer&lt;/li&gt;
&lt;li&gt;2d Convolutional layer (128 filters of size 5x5, ReLu)&lt;/li&gt;
&lt;li&gt;2d MaxPool layer (pool size 2x2)&lt;/li&gt;
&lt;li&gt;2d Convolutional layer (128 filters of size 5x5, ReLu)&lt;/li&gt;
&lt;li&gt;2d MaxPool layer (pool size 2x2)&lt;/li&gt;
&lt;li&gt;Dropout layer (probability = 0.5)&lt;/li&gt;
&lt;li&gt;Dense layer (256 neurons, ReLu)&lt;/li&gt;
&lt;li&gt;Softmax layer (10 neurons)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Results&lt;/h1&gt;
&lt;p&gt;With this architecture I've managed to achieve a little over 75% of accuracy
with around 2 hours of training (on my GT645&lt;strong&gt;M&lt;/strong&gt;, which is not a speed demon).&lt;/p&gt;
&lt;h1&gt;Roadmap&lt;/h1&gt;
&lt;p&gt;So, what can we do now?&lt;/p&gt;
&lt;h3&gt;Changing the network architecture&lt;/h3&gt;
&lt;p&gt;So far we can see that my network is pretty shallow. Maybe adding more filters
could help? Also, it might be helpful to put a dense ReLu layer between some
convolution layers. I'll have to experiment with these ideas.&lt;/p&gt;
&lt;h3&gt;Better learning techniques&lt;/h3&gt;
&lt;p&gt;This version of the code doesn't use &lt;strong&gt;weight decay&lt;/strong&gt; nor &lt;strong&gt;learning rate&lt;/strong&gt;
decay. The only enchancement is the &lt;strong&gt;momentum&lt;/strong&gt;. Both of the missing techniques
could be added easily.&lt;/p&gt;
&lt;p&gt;These techniques require some additional tuning, so it might be a
little time consuming to find the right parameters. It'd be a good idea to do
that as the last step, after picking a good network architecture.&lt;/p&gt;
&lt;h3&gt;Data augmentation&lt;/h3&gt;
&lt;p&gt;So far I haven't done anything with the input data at all.&lt;/p&gt;
&lt;p&gt;The following simple transformations come to my mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cropping the image at random&lt;/li&gt;
&lt;li&gt;horizontal flip&lt;/li&gt;
&lt;li&gt;rescaling&lt;/li&gt;
&lt;/ul&gt;</content><category term="neural networks"></category><category term="cifar"></category></entry><entry><title>Getting CUDA working on a laptop with two GPUs</title><link href="http://kele.github.io/getting-cuda-working-on-a-laptop-with-two-gpus.html" rel="alternate"></link><published>2016-01-18T00:00:00+01:00</published><updated>2016-01-18T00:00:00+01:00</updated><author><name>kele</name></author><id>tag:kele.github.io,2016-01-18:/getting-cuda-working-on-a-laptop-with-two-gpus.html</id><summary type="html">&lt;p&gt;I had a lot of trouble setting up my laptop NVIDIA GPU with CUDA on Ubuntu
14.04. These steps might actually help somebody.&lt;/p&gt;
&lt;p&gt;First, download the &lt;a href="http://developer.nvidia.com/cuda-downloads"&gt;NVIDIA CUDA Toolkit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Remove all old NVIDIA-related drivers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get remove --purge nvidia*
sudo apt-get --purge remove xserver-xorg-video-nouveau
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Backup your &lt;code&gt;/etc/modprobe.d …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I had a lot of trouble setting up my laptop NVIDIA GPU with CUDA on Ubuntu
14.04. These steps might actually help somebody.&lt;/p&gt;
&lt;p&gt;First, download the &lt;a href="http://developer.nvidia.com/cuda-downloads"&gt;NVIDIA CUDA Toolkit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Remove all old NVIDIA-related drivers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get remove --purge nvidia*
sudo apt-get --purge remove xserver-xorg-video-nouveau
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Backup your &lt;code&gt;/etc/modprobe.d/blacklist.conf&lt;/code&gt; and make sure it contains these lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blacklist nouveau
blacklist lbm-nouveau
blacklist nvidia-173
blacklist nvidia-96
blacklist nvidia-current
blacklist nvidia-173-updates
blacklist nvidia-96-updates
&lt;span class="nb"&gt;alias&lt;/span&gt; nvidia nvidia_current_updates
&lt;span class="nb"&gt;alias&lt;/span&gt; nouveau off
&lt;span class="nb"&gt;alias&lt;/span&gt; lbm-nouveau off
options nouveau &lt;span class="nv"&gt;modeset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add bumblebee and xorg-edgers repositories:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-add-repository ppa:bumblebee/stable -y
sudo add-apt-repository ppa:xorg-edgers/ppa -y
sudo apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get upgrade -y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now it's time to install the CUDA toolkit (along with &lt;code&gt;nvidia-352&lt;/code&gt; drivers).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This installs necessary headers.&lt;/span&gt;
sudo apt-get install linux-source &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get install linux-headers-&lt;span class="k"&gt;$(&lt;/span&gt;uname -r&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# USE THE REAL PACKAGE NAME BELOW&lt;/span&gt;
sudo dpkg -i cuda-repo-ubuntu1404-7-5-local_7.5-18_amd64.deb

sudo apt-get install cuda
sudo apt-get update
sudo apt-get dist-upgrade -y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install bumblebee (to have switchable GPUs).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install bumblebee bumblebee-nvidia virtualgl virtualgl-libs virtualgl-libs-ia32:i386 virtualgl-libs:i386
sudo usermod -a -G bumblebee &lt;span class="nv"&gt;$USER&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Edit &lt;code&gt;/etc/bumblebee/bumblebee.conf&lt;/code&gt; as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change all occurences of &lt;code&gt;nvidia-current&lt;/code&gt; to &lt;code&gt;nvidia-352&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After &lt;code&gt;Driver=&lt;/code&gt; insert &lt;code&gt;nvidia&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After &lt;code&gt;KernelDriver=&lt;/code&gt; insert &lt;code&gt;nvidia-352&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(if having trouble with optirun) uncomment the &lt;code&gt;BusID&lt;/code&gt; line and set it
  accordingly to what the comment above this line says.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Make sure that these lines are in &lt;code&gt;/etc/modprobe.d/bumblebee.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blacklist nvidia-352
blacklist nvidia-352-updates
blacklist nvidia-experimental-352

&lt;span class="nb"&gt;alias&lt;/span&gt; nvidia-uvm nvidia_352_uvm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After &lt;code&gt;reboot&lt;/code&gt; everything should work fine. You can test it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;optirun glxspheres64
&lt;span class="c1"&gt;# compare the performance with default GPU running the command above without optirun&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you need more help: &lt;a href="http://developer.download.nvidia.com/compute/cuda/7.5/Prod/docs/sidebar/CUDA_Installation_Guide_Linux.pdf"&gt;CUDA installation guide for Linux&lt;/a&gt;&lt;/p&gt;</content><category term="cuda"></category><category term="neural networks"></category></entry><entry><title>Setting up IPython with Git</title><link href="http://kele.github.io/setting-up-ipython-with-git.html" rel="alternate"></link><published>2016-01-17T00:00:00+01:00</published><updated>2016-01-17T00:00:00+01:00</updated><author><name>kele</name></author><id>tag:kele.github.io,2016-01-17:/setting-up-ipython-with-git.html</id><summary type="html">&lt;p&gt;Since I've been annoyed by how IPython notebooks integrate with Git, I'd like
to share a solution for this problem.&lt;/p&gt;
&lt;p&gt;The description can be found here: &lt;a href="http://stackoverflow.com/a/25765194/1239545"&gt;http://stackoverflow.com/a/25765194/1239545&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What it does is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it adds a hook for saving the notebook, which also saves a &lt;em&gt;pure&lt;/em&gt; version …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Since I've been annoyed by how IPython notebooks integrate with Git, I'd like
to share a solution for this problem.&lt;/p&gt;
&lt;p&gt;The description can be found here: &lt;a href="http://stackoverflow.com/a/25765194/1239545"&gt;http://stackoverflow.com/a/25765194/1239545&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What it does is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it adds a hook for saving the notebook, which also saves a &lt;em&gt;pure&lt;/em&gt; version&lt;/li&gt;
&lt;li&gt;it suggests that you keep both the pure version and the notebook under version control&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>First post</title><link href="http://kele.github.io/first-post.html" rel="alternate"></link><published>2016-01-16T00:00:00+01:00</published><updated>2016-01-16T00:00:00+01:00</updated><author><name>kele</name></author><id>tag:kele.github.io,2016-01-16:/first-post.html</id><summary type="html">&lt;p&gt;First post.&lt;/p&gt;</summary><content type="html">&lt;p&gt;First post.&lt;/p&gt;</content></entry></feed>